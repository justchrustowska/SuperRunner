using UnityEngine;
using System.Collections;

[RequireComponent(typeof(PlayerHealth))]
public class PlayerInvulnerability : MonoBehaviour
{
    [SerializeField] private float blinkDuration = 1f;
    [SerializeField] private float blinkInterval = 0.1f;

    private Collider _collider;
    private Renderer _renderer;
    private bool _isBlinking;
    private PlayerHealth _playerHealth;

    private void Awake()
    {
        _collider = GetComponent<Collider>();
        _renderer = GetComponent<Renderer>();
        _playerHealth = GetComponent<PlayerHealth>();
    }

    private void OnCollisionEnter(Collision collision)
    {
        if (collision.gameObject.CompareTag("Obstacle") && !_isBlinking)
        {
            _playerHealth.TakeDamage(1);
            StartCoroutine(TemporaryInvulnerability(collision.collider, 0.5f));
        }
    }

    private IEnumerator TemporaryInvulnerability(Collider otherCollider, float ignoreTime)
    {
        _isBlinking = true;

        Physics.IgnoreCollision(_collider, otherCollider, true);
        float elapsed = 0f;

        while (elapsed < blinkDuration)
        {
            _renderer.enabled = !_renderer.enabled;
            yield return new WaitForSeconds(blinkInterval);
            elapsed += blinkInterval;
        }

        _renderer.enabled = true;
        Physics.IgnoreCollision(_collider, otherCollider, false);
        _isBlinking = false;
    }
}